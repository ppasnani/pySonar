#!/usr/bin/python -tt

import pyaudio
import wave
from pylab import *

ChirpFile = "Sound Files/plain_chirp.wav"
Chunk = 1024
Format = pyaudio.paInt16
Channels = 2
Rate = 44100#384000
Record_Seconds = 1
Wave_Output_Filename = "Sound Files/output.wav"

#Require: Requires an exisitng pyAudio object which has set
#       up the port audio system
#Ensures: Plays the ChirpFile wave file over the speakers
#       if the speakers are available

def chirp(p):
    transmitChirp = wave.open(ChirpFile, 'r')

    #p = pyaudio.PyAudio()
    stream = p.open(format=p.get_format_from_width(transmitChirp.getsampwidth()),
                    channels=transmitChirp.getnchannels(),
                    rate=transmitChirp.getframerate(),
                    output=True)
    data = transmitChirp.readframes(Chunk)

    while data != '':
        stream.write(data)
        data = transmitChirp.readframes(Chunk)

    stream.stop_stream()
    stream.close()

#Requires: Requires an existing pyAudio object which has set
#       up the port audio system
#Ensures: Returns an array of frames containing the recorded data

def record(p):
    stream = p.open(format=Format,
                    channels=Channels,
                    rate=Rate,
                    input=True,
                    frames_per_buffer=Chunk)
    print 'Recording'
    frames = []
    framesNum = []
    for i in range(0, int(Rate/Chunk * Record_Seconds)):
        data = stream.read(Chunk)
        frames.append(data)
        framesNum.append(fromstring(data, 'Int16'))

    #print frames[0:20]
    stream.stop_stream()
    stream.close()
    print framesNum[0:5]
    return framesNum

#Using [1] as reference
def show_wave(audio):
    subplot(211)
    plot(audio)
    title('Wave form and spectrogram of recorded audio')

    subplot(212)
    spectrogram = specgram(audio, Fs = Rate, scale_by_freq=True, sides='default')

    show()

def main():
    #Instantiate pyAudio
    p = pyaudio.PyAudio()
    #Use pyAudio object to transmit and record sound
    chirp(p)
    audio = record(p)
    show_wave(audio)
    p.terminate()

if __name__ == '__main__':
    main()
